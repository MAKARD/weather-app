module.exports = {
  root: true,
  env: {
    jest: true,
  },
  parserOptions: {
    tsconfigRootDir: __dirname,
    project: './tsconfig.json',
    ecmaFeatures: {
      jsx: true,
      modules: true
    }
  },
  settings: {
    react: {
      version: 'detect'
    },
    'import/resolver': {
      typescript: {}
    }
  },
  extends: [
    '@react-native',
    'plugin:jest/recommended',
    'plugin:jest/style',
    'plugin:import/errors',
    'plugin:@typescript-eslint/recommended',
  ],
  parser: '@typescript-eslint/parser',
  plugins: [
    'eslint-plugin-react',
    'react',
    'react-native',
    'react-hooks',
    '@typescript-eslint',
    'sonar',
  ],
  rules: {
    '@typescript-eslint/no-shadow': 'error',
    'no-path-concat': 'error',
    'comma-dangle': 'error',
    quotes: ['error', 'single', {
      avoidEscape: true,
    }],
    'no-extend-native': 'error',
    'react-native/no-inline-styles': 'error',
    'no-return-assign': 'error',
    'no-floating-decimal': 'error',
    'react/react-in-jsx-scope': 'error',
    'eslint-comments/no-unlimited-disable': 'error',
    '@typescript-eslint/no-unused-vars': ['error', {
      ignoreRestSiblings: true,
    }],
    'no-undef-init': 'error',
    radix: 'off',
    'semi-spacing': 'error',
    'no-useless-escape': 'error',
    '@typescript-eslint/ban-types': 'off',
    '@typescript-eslint/no-namespace': 'off',
    'react-hooks/exhaustive-deps': 'off',
    'eslint-comments/no-unused-disable': 'error',
    'no-extra-semi': 'error',
    'no-irregular-whitespace': 'error',
    'no-unexpected-multiline': 'error',
    semi: ['error', 'always'],
    'key-spacing': ['error', { beforeColon: false, afterColon: true, mode: 'strict' }],
    'comma-spacing': ['error', { before: false, after: true }],
    'rest-spread-spacing': 'error',
    'template-curly-spacing': 'error',
    'object-curly-spacing': ['error', 'always'],
    'block-spacing': 'error',
    'arrow-spacing': ['error', { before: true, after: true }],
    'space-in-parens': ['error', 'never'],
    'react/self-closing-comp': ['error', {
      component: true,
    }],
    'react/jsx-closing-bracket-location': 'error',
    'react/jsx-indent-props': ['error', 2],
    'react/jsx-wrap-multilines': ['error', {
      declaration: 'parens',
      assignment: 'parens',
      return: 'parens',
      arrow: 'parens',
      condition: 'parens',
      logical: 'parens',
      prop: 'parens',
    }],
    indent: ['error', 2, { SwitchCase: 1 }],
    'no-fallthrough': 'error',
    'no-console': 'error',
    'no-return-await': 'off',
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: 'variable',
        format: ['camelCase', 'PascalCase', 'UPPER_CASE'],
      },
      {
        selector: 'function',
        format: ['camelCase', 'PascalCase'],
      },
      {
        selector: 'typeLike',
        format: ['PascalCase'],
      },
    ],
    '@typescript-eslint/await-thenable': 'error',
    '@typescript-eslint/no-redeclare': 'off',
    '@typescript-eslint/return-await': ['error', 'in-try-catch'],
    '@typescript-eslint/type-annotation-spacing': ['error', {
      after: true,
    }],
    'jsx-quotes': ['error', 'prefer-double'],
    'eol-last': ['error', 'always'],
    'no-trailing-spaces': ['error'],
    'no-multiple-empty-lines': ['error', {
      max: 1,
      maxEOF: 0,
    }],
    'padding-line-between-statements': ['error',
      {
        blankLine: 'always', prev: '*', next: 'return',
      },
      {
        blankLine: 'always', prev: 'block-like', next: '*',
      },
    ],
    'react/jsx-fragments': ['off', 'element'],
    'react/destructuring-assignment': ['off', 'never'],
    '@typescript-eslint/member-delimiter-style': ['error', {
      multiline: {
        delimiter: 'semi',
        requireLast: true,
      },
      singleline: {
        delimiter: 'semi',
        requireLast: false,
      },
    }],
    'max-lines': ['error', 200],
    'import/no-default-export': 'error',
    'import/newline-after-import': ['error', { count: 1 }],
    'import/prefer-default-export': 'off',
    'import/order': ['error', {
      groups: [
        'builtin', 'external', 'parent', 'sibling', 'index',
      ],
      'newlines-between': 'always',
      pathGroupsExcludedImportTypes: ['builtin'],
    }],
    'react/jsx-props-no-spreading': 'off',
    'react/jsx-indent': ['error', 2, { indentLogicalExpressions: true, checkAttributes: true }],
    'arrow-body-style': 'off',
    'react/prop-types': 'off',
    'react/display-name': ['error'],
    'react-hooks/rules-of-hooks': 'error',
    'jest/no-alias-methods': 'error',
    'jest/expect-expect': 'error',
    'jest/no-commented-out-tests': 'error',
    'jest/valid-title': [
      'error',
      {
        mustMatch: {
          it: [/^should/u.source, 'The name of the test must begin with should'],
        },
      },
    ],
    'jest/no-restricted-matchers': [
      'error',
      {
        toBeFalsy: null,
        toBeTruthy: null,
      },
    ],
    'jest/prefer-to-be': 'error',
    'react/no-unstable-nested-components': ['error', { allowAsProps: true }],
    'react/require-default-props': 'off',
    'react/no-unused-prop-types': ['error', { ignore: ['testID'] }],
    'react/jsx-no-useless-fragment': ['error', { allowExpressions: true }],
    'no-prototype-builtins': 'off',
    'react-native/no-single-element-style-arrays': 'error',
    'require-await': 'error',
    'jest/no-standalone-expect': ['error', {
      additionalTestBlockFunctions: ['then', 'when', 'and', 'given'],
    }],
    '@typescript-eslint/default-param-last': 'off',
    'react/jsx-curly-brace-presence': ['error', 'never'],
    '@typescript-eslint/prefer-nullish-coalescing': 'off',
    '@typescript-eslint/array-type': ['error', { default: 'generic' }],
    'import/no-duplicates': 'error',
    'import/no-cycle': 'error',
    'max-len': ['error', {
      ignoreUrls: true,
      code: 120,
    }],
    'no-empty': 'error',
    'no-multi-spaces': 'error',
    'no-constant-binary-expression': 'error',
    'no-extra-boolean-cast': 'error',
    'prefer-promise-reject-errors': 'error',
    '@typescript-eslint/prefer-string-starts-ends-with': 'error',
    '@typescript-eslint/prefer-optional-chain': 'error',
    '@typescript-eslint/prefer-as-const': 'error',
    '@typescript-eslint/no-duplicate-enum-values': 'error',
    '@typescript-eslint/no-useless-constructor': 'off',
    '@typescript-eslint/no-non-null-assertion': 'error',
    'react/jsx-boolean-value': 'error',
    'brace-style': ['error', '1tbs', { allowSingleLine: false }],
    'no-restricted-syntax': [
      'error',
      {
        selector: 'FunctionDeclaration[id.name=/^handle/]',
        message: 'Handler function names should start with "on" instead of "handle".',
      },
      {
        selector: 'VariableDeclarator[id.name=/^handle/][init.type="CallExpression"][init.arguments.0.type=/^(?:FunctionExpression|ArrowFunctionExpression)$/]',
        message: 'Handler function names should start with "on" instead of "handle".',
      },
    ],
    curly: ['error', 'all'],
    'function-paren-newline': ['error', 'multiline-arguments'],
    'no-restricted-globals': ['error',
      {
        name: 'setTimeout',
        message: 'Avoid using timers',
      },
    ],
    'no-restricted-properties': ['error',
      {
        object: 'global',
        property: 'setTimeout',
        message: 'Avoid using timers',
      },
    ],
    'quote-props': ['error', 'as-needed'],
    'no-lonely-if': 'error',
    'sonar/public-static-readonly': 'error',
  },
  overrides: [
    {
      files: ['**/__mocks__/**'],
      rules: {
        '@typescript-eslint/no-explicit-any': 'off',
        'react/react-in-jsx-scope': 'off',
      },
    },
    {
      files: ['*.test.ts', '*.test.tsx'],
      rules: {
        'no-extend-native': 'off',
        '@typescript-eslint/no-explicit-any': 'off',
        'no-new': 'off',
        'react-hooks/rules-of-hooks': 'off',
        'max-lines': 'off',
        'react/display-name': 'off',
        'react/jsx-no-useless-fragment': 'off',
        'no-restricted-globals': 'off',
        'no-restricted-properties': 'off',
        '@typescript-eslint/no-non-null-assertion': 'off',
      },
    },
  ],
};
